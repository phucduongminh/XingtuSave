import { StyleSheet, View, Pressable, Text, Image, TextInput, Button } from "react-native";
import HeaderName from "../components/HeaderName";
import AddedItems from "../components/AddedItems";
import { Padding, Color, FontFamily, FontSize, Border } from "../GlobalStyles";
import { Picker } from '@react-native-picker/picker';
import { useState } from "react";
import { AddTrades } from '../models/AddTrades';

const TradeInputScreen = () => {
  const [formType, setFormType] = useState('expense');
  const [category, setCategory] = useState('');
  const [money, setMoney] = useState('');
  const [description, setDescription] = useState('');
  const [color, setColor] = useState('black');
  const [date, setDate] = useState(new Date());
  const [itemsList, setItemsList] = useState<AddTrades[]>([]);

  // This function will return the appropriate form based on the form type
  const renderForm = () => {
    if (formType === 'expense') {
      // Return the income form
      return (
        <View>
          {/* Category Dropdown */}
          {/* This should be replaced with a dynamic dropdown fetched from database */}
          <Picker selectedValue={category} onValueChange={(itemValue) => setCategory(itemValue)}>
            <Picker.Item label="Category1" value="cat1" />
            <Picker.Item label="Category2" value="cat2" />
          </Picker>

          {/* Money Input */}
          <TextInput
            placeholder='Số tiền'
            keyboardType='numeric'
            style={{ ...styles.inputMoneyField, borderColor: color }}
            // Khi onFocus, gọi hàm setColor để đổi màu thành xanh
            onFocus={() => setColor('blue')}
            // Khi onBlur, gọi hàm setColor để đổi màu thành đen
            onBlur={() => setColor('black')}
            onChangeText={(text) => setMoney(text)}
            value={money}
          />

          {/* Description Input */}
          <TextInput
            placeholder='Thêm mô tả...'
            style={{ ...styles.inputMoneyField, borderColor: color }}
            // Khi onFocus, gọi hàm setColor để đổi màu thành xanh
            onFocus={() => setColor('blue')}
            // Khi onBlur, gọi hàm setColor để đổi màu thành đen
            onBlur={() => setColor('black')}
            onChangeText={(text) => setDescription(text)}
            value={description}
          />

          {/* Date Picker - This should be replaced with a date picker component */}
          {/* Image Picker - This should be replaced with an image picker component */}

          {/* Add Button - To add items to list below*/}
          <Button title='+ ADD' onPress={() => {
            // Logic to add item details into items list
            // Example:
            /* let newItem={
                category,
                money,
                description,
                date
            };
            setItemsList([...itemsList,newItem]); */
          }} />
        </View>
      );
    } else if (formType === 'income') {
      // Return the expense form
      return (
        <View>
          {/* Here you can add the components for the expense form */}
          {/* For example, you can add a field to select the source of the expense */}
        </View>
      );
    }
  };

  return (
    <View>
      <Text>Thêm khoản chi tiêu</Text>
      <Picker selectedValue={formType} onValueChange={(itemValue) => setFormType(itemValue)}>
        <Picker.Item label="Khoản thu" value="income" />
        <Picker.Item label="Khoản chi" value="expense" />
      </Picker>

      {/* Render the form based on the form type */}
      {renderForm()}

      {/* Items List - To display the items added */}
      <View>
        {itemsList.map((item, index) => (
          <View key={index}>
            <Text>{item.category}</Text>
            <Text>{item.money}</Text>
            <Text>{item.description}</Text>
            <Text>{item.date}</Text>
            {/* Image - This should display the image selected for the item */}
            {/* Delete Button - To remove the item from the list */}
            <Button title='- DELETE' onPress={() => {
              // Logic to delete item from items list
              // Example:
              let updatedItemsList = [...itemsList];
              updatedItemsList.splice(index, 1);
              setItemsList(updatedItemsList);
            }} />
          </View>
        ))}
      </View>

      {/* Save Button - To save the items list into database */}
      <Button title='Lưu' onPress={() => {
        // Logic to save the items list into database
        // Example:
        //saveIncomeData(db, itemsList);
      }} />

      {/* Navigation Bar - This should be replaced with a navigation bar component */}
    </View>
  );
};

export default TradeInputScreen;




import React, { useState } from 'react';
import { Button, Image, View } from 'react-native';
import {launchImageLibrary, launchCamera} from 'react-native-image-picker';


const App = () => {
  const [selectedImage, setSelectedImage] = useState(null);

  const openImagePicker = () => {
    const options = {
      mediaType: 'photo',
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
    };

    launchImageLibrary(options, (response) => {
      if (response.didCancel) {
        console.log('User cancelled image picker');
      } else if (response.error) {
        console.log('Image picker error: ', response.error);
      } else {
        let imageUri = response.uri || response.assets?.[0]?.uri;
        setSelectedImage(imageUri);
      }
    });
  };
  
  handleCameraLaunch = () => {
    const options = {
      mediaType: 'photo',
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
    };
  
    launchCamera(options, response => {
      console.log('Response = ', response);
      if (response.didCancel) {
        console.log('User cancelled camera');
      } else if (response.error) {
        console.log('Camera Error: ', response.error);
      } else {
        // Process the captured image
        let imageUri = response.uri || response.assets?.[0]?.uri;
        setSelectedImage(imageUri);
        console.log(imageUri);
      }
    });
  }

  return (
    <View style={{ flex: 1, justifyContent: 'center' }}>
     {selectedImage && (
          <Image
            source={{ uri: selectedImage }}
            style={{ flex: 1 }}
            resizeMode="contain"
          />
    )}
    <View style={{ marginTop: 20 }}>
      <Button title="Choose from Device" onPress={openImagePicker} />
    </View>
    <View style={{ marginTop: 20,marginBottom: 50 }}>
      <Button title="Open Camera" onPress={handleCameraLaunch} />
    </View>
  </View>
  );
};

export default App;